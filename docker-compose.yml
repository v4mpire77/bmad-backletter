version: '3.9'

services:
  # FastAPI Backend with enhanced capabilities
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: blackletter_api
    working_dir: /code
    command: uvicorn blackletter_api.main:app --reload --host 0.0.0.0 --port 8000
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379/0
    volumes:
      - ./apps/api:/code
      - api_data:/data
    ports:
      - "8000:8000"
    depends_on:
      - redis
      - supabase-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Next.js Frontend
  web:
    build:
      context: ./apps/web
      dockerfile: Dockerfile
    container_name: blackletter_web
    working_dir: /app
    command: sh -c "pnpm install && pnpm dev"
    env_file:
      - .env
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_BASE=http://localhost:8000
    volumes:
      - ./apps/web:/app
      - web_node_modules:/app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - api

  # Celery Worker for Background Processing (Enhanced from v4mpire77/blackletter)
  celery:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: blackletter_celery
    working_dir: /code
    command: celery -A blackletter_api.services.celery_app:celery_app worker --loglevel=info --concurrency=2
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - REDIS_URL=redis://redis:6379/0
      - CELERY_WORKER=true
    volumes:
      - ./apps/api:/code
      - api_data:/data
    depends_on:
      - redis
      - api
    restart: unless-stopped

  # Redis for Celery Message Broker and Caching
  redis:
    image: redis:7-alpine
    container_name: blackletter_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Supabase PostgreSQL Database
  supabase-db:
    image: supabase/postgres:15.1.0.63
    container_name: blackletter_supabase_db
    restart: unless-stopped
    environment:
      POSTGRES_PASSWORD: blackletter123
      POSTGRES_USER: postgres
      POSTGRES_DB: blackletter
    ports:
      - "54322:5432"
    volumes:
      - supabase_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Supabase Auth Service
  supabase-auth:
    image: supabase/gotrue:v2.57.1
    container_name: blackletter_supabase_auth
    depends_on:
      supabase-db:
        condition: service_healthy
    environment:
      GOTRUE_DB_DRIVER: postgres
      GOTRUE_DB_DATABASE_URL: postgres://postgres:blackletter123@supabase-db:5432/blackletter
      GOTRUE_SITE_URL: http://localhost:3000
      GOTRUE_JWT_SECRET: your-jwt-secret-replace-in-production
      GOTRUE_EXTERNAL_EMAIL_ENABLED: "true"
      GOTRUE_API_HOST: 0.0.0.0
      GOTRUE_PORT: 9999
    ports:
      - "9999:9999"
    restart: unless-stopped

  # Document Processing Services (Optional - from upstream)
  gotenberg:
    image: gotenberg/gotenberg:8
    container_name: blackletter_gotenberg
    command: ["gotenberg", "--chromium-disable-javascript=true"]
    ports:
      - "3001:3000"
    restart: unless-stopped

  # Vector Database for Document Embeddings (Optional)
  weaviate:
    image: semitechnologies/weaviate:1.25.7
    container_name: blackletter_weaviate
    environment:
      QUERY_DEFAULTS_LIMIT: 25
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: /var/lib/weaviate
    volumes:
      - weaviate_data:/var/lib/weaviate
    ports:
      - "8081:8080"
    restart: unless-stopped

  # MinIO for File Storage (Optional)
  minio:
    image: minio/minio:latest
    container_name: blackletter_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: admin
      MINIO_ROOT_PASSWORD: adminadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    restart: unless-stopped

volumes:
  api_data:
    driver: local
  web_node_modules:
    driver: local
  redis_data:
    driver: local
  supabase_data:
    driver: local
  weaviate_data:
    driver: local
  minio_data:
    driver: local

networks:
  default:
    name: blackletter_network
    driver: bridge
